1. Find the top 10 customers who have rented the most films, along with the count of films they rented.

select concat(C.first_name,' ',C.last_name) as Customer_Name, count(R.rental_id) as Movies_Rented
from `Cineflix.customer` C join `Cineflix.rental` R on C.customer_id = R.customer_id
group by Customer_Name
order by Movies_Rented DESC
limit 10;

2. Identify which film has been rented the most and provide its title and rental count.

# This wont give correct o/p if multiple movie has same highest Rental_Count
select FT.title, count(R.rental_id) as Rental_Count
from `Cineflix.film_text` FT join `Cineflix.inventory` I on FT.film_id = I.film_id 
join `Cineflix.rental` R on R.inventory_id = I.inventory_id
group by FT.title
order by 2 Desc
limit 1;

3. Calculate the total revenue generated by each store and sort by the highest revenue.

select 
#S.store_id, I.store_id, I.inventory_id , R.Inventory_id, R.rental_id, P.rental_id, P.amount
S.store_id, coalesce (round(sum(P.amount),2),0) as Revenue
from `Cineflix.store` S left join `Cineflix.inventory` I on S.store_id = I.store_id
left join `Cineflix.rental`R on I.inventory_id = R.Inventory_id
left join `Cineflix.payment` P on CAST(R.rental_id as string) = P.rental_id
group by S.store_id
order by 2 desc;


4. List the customers who have rented films from more than one store.

select 
concat(C.first_name,' ',C.last_name) as CustomerName, count(distinct S.store_id) as StoreIds
from `Cineflix.customer` C join `Cineflix.rental` R 
on C.customer_id = R.customer_id 
join `Cineflix.inventory` I 
on R.inventory_id = I.inventory_id
join `Cineflix.store` S 
on S.store_id = I.store_id
group by CustomerName
having StoreIds >= 2
order by 2 Desc, 1 ;

5. Retrieve the details of customers who rented films in the last 30 days.

select distinct concat(C.first_name, ' ',C.last_name) as full_name, C.email
from `Cineflix.customer` C join `Cineflix.rental` R 
on C.customer_id = R.customer_id
where R.rental_date >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 30 DAY)


6. Determine the average rental duration for each film category.

#we used left join to ensure that we are also gettig vategories which were never rented.
select C.name, coalesce(round(avg(F.rental_duration),2),0) as Average_Rent_Duration
from `Cineflix.category` C left join `Cineflix.film_category` FC 
on C.category_id = FC.category_id
left join `Cineflix.film` F on FC.film_id = F.film_id
group by 1
order by 2 desc, 1;


7. Identify the film that has the highest rental revenue and its category.

SELECT F.title AS FilmTitle, C.name AS CategoryName
FROM `Cineflix.film` F
JOIN `Cineflix.inventory` I ON F.film_id = I.film_id
JOIN `Cineflix.rental` R ON R.inventory_id = I.inventory_id
JOIN `Cineflix.payment` P ON P.rental_id = CAST(R.rental_id AS STRING)
JOIN `Cineflix.film_category` FC ON FC.film_id = F.film_id
JOIN `Cineflix.category` C ON C.category_id = FC.category_id
GROUP BY F.title, C.name
ORDER BY SUM(P.amount) DESC
LIMIT 1;


8. Find the 5 actors whose films have been rented the most and provide their names and total rentals.

select A.first_name, A.last_name, round(sum(F.rental_duration),2) as Rental_Duration
from `Cineflix.actor` A 
join `Cineflix.film_actor` FA on A.actor_id = FA.actor_id
join `Cineflix.film` F on F.film_id = FA.film_id
group by A.first_name, A.last_name
order by 3 desc
limit 5;


9. Generate a report of the total revenue generated by each staff member.

select S.first_name, S.last_name, coalesce (round(P.Revenue_by_Staff,2),0) as Revenue_by_Satff
from `Cineflix.staff` S 
left join (select staff_id, sum(amount)as Revenue_by_Staff from `Cineflix.payment` group by staff_id) P on S.staff_id = P.staff_id
order by 3 desc;

10. Identify the city with the highest number of active customers.

select C.city,count(CU.customer_id) as Active_User
from `Cineflix.city` C
join `Cineflix.address` A on C.city_id = A.city_id
join `Cineflix.customer` CU on A.address_id = CU.address_id
where CU.active = 1
group by 1
order by 2 desc, 1
limit 1;


11. Calculate the total amount paid by each customer in the past year.

select concat(C.first_name,' ',C.last_name) as Customer_Name, coalesce (round(sum(P.amount),2),0) as Amount_Paid 
from `Cineflix.customer` C
left join `Cineflix.payment` P on C.customer_id = P.customer_id
where P.payment_date >= timestamp_sub(current_timestamp(), interval 365 DAY ) 
group by 1
order by 2 desc;


12. List the films that have never been rented.

select distinct F.title 
from `Cineflix.film` F
join `Cineflix.inventory` I on F.film_id = I.film_id 
#The purpose of not using a LEFT JOIN in above line is to ensure that we are only filtering files which are in inventory & never rented.
left join `Cineflix.rental`R on I.inventory_id = R.inventory_id 
where R.inventory_id is null;

13. Retrieve the name of the store with the highest number of rentals.

# intentially tried a new concept
select B.store_id, A.address
from `Cineflix.address` A
join (
select S.address_id, C.store_id
from `Cineflix.store` S 
join (
select I.store_id, count(R.rental_id) as Rental_Count
from `Cineflix.inventory` I  
join `Cineflix.rental` R on I.inventory_id = R.inventory_id
group by 1
order by 2 desc
limit 1 ) C on S.store_id = C.store_id ) B
on A.address_id = B.address_id

14. List the films rented by customers who have a `gmail.com` email address.

select distinct F.title 
from `Cineflix.film` F
join `Cineflix.inventory` I on F.film_id = I.film_id
join `Cineflix.rental` R on I.inventory_id = R.inventory_id
join `Cineflix.customer` C on R.customer_id = C.customer_id
where C.email like '%gmail.com%'

15. Determine the most popular film category based on the total number of rentals.

select C.name as File_Category, count(R.rental_id) as Rental_Count
from `Cineflix.film_category` FC
join `Cineflix.inventory`I on FC.film_id = I.film_id
join `Cineflix.rental` R on I.inventory_id = R.inventory_id
join `Cineflix.category` C on C.category_id = FC.category_id
group by 1
order by 2 desc;

16. Calculate the average rental rate of films in each language.

select L.name, coalesce (round(avg(F.rental_rate),2),0) as Average_Rental_Rate
from `Cineflix.language` L
join `Cineflix.film` F on L.language_id = F.language_id
group by L.name
order by 1;


17. Identify customers who have not rented any films in the last six months.
# A simple join wont help in this scnario as we need to ensure coupls of things 
#1- Customer who has never rented anything should also be included , this data we can lose after applying where clause.
#2- Single a single customer can have many rentals, he should be only inlcuded in the final input if all of his rentals are ooder than 6 months.
# A customer should not be included if one of the rental is more than 6 month old while other are recent.
# hence below query is a bad example bause it doest handle customer who has multiple order some of whicg are recent while some of them are 6 months old
            [Query] select  distinct concat(C.first_name,' ', C.last_name) as Full_name
            from `Cineflix.customer` C
            left join `Cineflix.rental` R on C.customer_id = R.customer_id
            where R.rental_date <= timestamp_sub(current_timestamp(), interval 180 DAY) or R.customer_id is null;
            [/Query]

proper Answer - 
select  distinct concat(C.first_name,' ', C.last_name) as Full_name
from `Cineflix.customer` C
left join `Cineflix.rental` R on C.customer_id = R.customer_id
group by Full_name, R.rental_date
having sum(
  case 
  when R.rental_date > timestamp_sub(current_timestamp(), interval 180 DAY) 
  then 1 
  else 0 
  end )=0;


18. Find the staff member who has processed the highest number of rental transactions.

select concat(S.first_name,' ',S.last_name) as Staff_Employee, count(P.payment_id) as Rental_Transaction
from `Cineflix.staff` S 
join `Cineflix.payment` P on S.staff_id = P.staff_id
where P.amount > 0
group by Staff_Employee
order by 2 desc
limit 1;


select concat(S.first_name,' ',S.last_name) as Staff_Employee
from `Cineflix.staff` S 
join `Cineflix.payment` P on S.staff_id = P.staff_id
where P.amount > 0
group by Staff_Employee, P.rental_id
having count(P.rental_id) = 
(
  Select count(P1.rental_id)
from `Cineflix.staff` S1 
join `Cineflix.payment` P1 on S1.staff_id = P1.staff_id
where P1.amount > 0
group by S1.first_name, P1.rental_id
order by 1 desc
limit 1
)


SELECT CONCAT(S.first_name, ' ', S.last_name) AS Staff_Employee
FROM `Cineflix.staff` S
JOIN `Cineflix.payment` P ON S.staff_id = P.staff_id
WHERE P.amount > 0
GROUP BY S.staff_id, S.first_name, S.last_name
HAVING COUNT(P.rental_id) = (
  SELECT MAX(rental_count)
  FROM (
    SELECT S1.staff_id, COUNT(P1.rental_id) AS rental_count
    FROM `Cineflix.staff` S1
    JOIN `Cineflix.payment` P1 ON S1.staff_id = P1.staff_id
    WHERE P1.amount > 0
    GROUP BY S1.staff_id
  ) AS staff_rentals
);


19. Determine the number of films rented per month per year.

select extract(YEAR from R.rental_date) as YEAR,extract(MONTH from R.rental_date)as MONTH ,count(*) as Rental_per_month
from `Cineflix.rental` R
group by 1, 2
Order by 1 Desc, 2 desc;


20. Retrieve the details of customers who have rented all the films in a specific category.

SELECT DISTINCT Cu_Data.Cu_id 
FROM (
  SELECT 
    C.customer_id AS Cu_id, 
    F.category_id AS Cat_id, 
    COUNT(DISTINCT I.film_id) AS Films_Rented_in_Category
  FROM `Cineflix.customer` C
  JOIN `Cineflix.rental` R ON C.customer_id = R.customer_id
  JOIN `Cineflix.inventory` I ON R.inventory_id = I.inventory_id
  JOIN `Cineflix.film_category` F ON I.film_id = F.film_id
  GROUP BY C.customer_id, F.category_id
) AS Cu_Data
JOIN (
  SELECT 
    F.category_id AS Film_Cat_id, 
    COUNT(DISTINCT F.film_id) AS No_of_Films
  FROM `Cineflix.film_category` F
  GROUP BY F.category_id
) AS Film_Data 
ON Cu_Data.Cat_id = Film_Data.Film_Cat_id
WHERE Cu_Data.Films_Rented_in_Category = Film_Data.No_of_Films;


more optimised - 
SELECT C.customer_id
FROM `Cineflix.customer` C
JOIN `Cineflix.rental` R ON C.customer_id = R.customer_id
JOIN `Cineflix.inventory` I ON R.inventory_id = I.inventory_id
JOIN `Cineflix.film_category` FC ON I.film_id = FC.film_id
GROUP BY C.customer_id, FC.category_id
HAVING COUNT(DISTINCT I.film_id) = (
  SELECT COUNT(DISTINCT F.film_id)
  FROM `Cineflix.film_category` F
  WHERE F.category_id = FC.category_id
);

21. Identify the most frequently rented film in each store.

Select Table3.Store_Id, F.title
from (
SELECT Table1.Store_Id as Store_Id, Table1.File_Id as File_Id FROM 
(select I.store_id as Store_Id, I.film_id as File_Id, count(R.rental_id) as Rental_Count
from `Cineflix.rental` R 
join `Cineflix.inventory` I on R.inventory_id = I.inventory_id
group by I.store_id, I.film_id ) as Table1
join (
select SFRC.Store_Id as Store_Id, max(SFRC.Rental_Count) as SFMRC
from (
select I.store_id as Store_Id, I.film_id as File_Id, count(R.rental_id) as Rental_Count
from `Cineflix.rental` R 
join `Cineflix.inventory` I on R.inventory_id = I.inventory_id
group by I.store_id, I.film_id ) as SFRC
group by SFRC.Store_Id ) as Table2
on Table1.Store_Id = Table2.Store_Id
where Table1.Rental_Count = Table2.SFMRC 
) as Table3
join `Cineflix.film` F on Table3.File_Id = F.film_id


22. Generate a list of customers whose rental payments are above the average payment amount.

select concat(C.first_name,' ',C.last_name) as Customer_Name
#,sum(P.amount) as Rental_Amount
from `Cineflix.customer` C
join `Cineflix.rental` R on C.customer_id = R.customer_id
join `Cineflix.payment` P on CAST (R.rental_id as string) = P.rental_id
group by Customer_Name
having sum(P.amount) > avg(P.amount)
order by sum(P.amount) desc
limit 10;

23. Find the 10 most expensive films (replacement cost) that have been rented and calculate their total revenue.

select F.title, F.replacement_cost, round(sum(P.amount),2) as Rental_Amount
from `Cineflix.film` F
join `Cineflix.inventory` I on F.film_id = I .film_id
join `Cineflix.rental` R on I.inventory_id = R.inventory_id
join `Cineflix.payment` P on CAST ( R.rental_id as string ) = P.rental_id
group by F.title, F.replacement_cost
order by 2 Desc,1
limit 10;


24. Determine the category of films that has the highest average rental duration.

select C.name
#, round(avg(F.rental_duration),4) as Rental_Duration
from `Cineflix.category` C
join `Cineflix.film_category` FC on C.category_id = FC.category_id
join `Cineflix.film` F on FC.film_id = F.film_id
group by C.name
order by avg(F.rental_duration) Desc
limit 1;

25. Retrieve the details of films rented by customers from a specific city.

select CI.city, F.title, count(R.rental_id) as Rental_Count
from `Cineflix.customer` C 
join `Cineflix.address` A on C.address_id = C.address_id
join `Cineflix.city` CI on A.city_id = CI.city_id
join `Cineflix.rental` R on C.customer_id = R.customer_id
join `Cineflix.inventory` I on R.inventory_id = I.inventory_id
join `Cineflix.film` F on I.film_id = F.film_id
group by CI.city, F.title
order by 3 desc;

26. Find the store with the lowest rental revenue and provide its location.

select S.store_id, A.address, sum(P.amount) as Rental_Amt
from `Cineflix.payment` P 
join `Cineflix.rental` R ON cast (P.rental_id as string) = cast (R.rental_id as string)
join `Cineflix.inventory` I on R.inventory_id = I.inventory_id
join `Cineflix.store` S on I.store_id = S.store_id
join `Cineflix.address` A on S.address_id = A.address_id
group by S.store_id, A.address
Order by 3 
limit 1;


27. Calculate the total amount of late fees collected for overdue films in the past year.

SELECT SUM(p.amount) AS total_late_fees
FROM `Cineflix.payment` p
JOIN `Cineflix.rental` r ON p.rental_id = cast(r.rental_id as string)
JOIN `Cineflix.inventory` i ON r.inventory_id = i.inventory_id
JOIN `Cineflix.film` f ON i.film_id = f.film_id
WHERE r.return_date IS NOT NULL 
  AND DATE_DIFF(r.return_date, r.rental_date, DAY) > f.rental_duration
  AND cast (p.payment_date as datetime) >= DATE_SUB(current_datetime(), INTERVAL 20 YEAR);
#Used 20 YEAR as we dont have 1 year old data


28. List all films that have been rented by customers who reside in the same city as the store.

SELECT DISTINCT FT.title
from `Cineflix.customer` CU
join `Cineflix.address` AD on CU.address_id = AD.address_id
join `Cineflix.rental` RE on CU.customer_id = RE.customer_id
join `Cineflix.inventory` I on RE.inventory_id = I.inventory_id
join `Cineflix.film_text` FT on I.film_id = FT.film_id
#order by 2 desc
where AD.city_id in 
#(300, 576)
(
SELECT distinct AD.city_id
from `Cineflix.store` SO
join `Cineflix.address` AD on SO.address_id = AD.address_id )

29. Retrieve the names of staff members who have never processed a rental transaction.

select concat(ST.first_name,' ',ST.last_name)
from `Cineflix.rental` RE 
right join `Cineflix.staff` ST on RE.staff_id = ST.staff_id
where RE.staff_id is null;


30. Identify the language with the most films available in the inventory.

select L.name, count(*) as Film_Count
from `Cineflix.inventory` Inv 
join `Cineflix.film` F on Inv.film_id = F.film_id
join `Cineflix.language`L on F.language_id = L.language_id
group by 1
order by 2 Desc;

31. Find the average rental revenue generated per customer in each store.
Select CU.customer_id, S.store_id, round(avg(P.amount),2) as Average_Revenue
from `Cineflix.customer` CU
join `Cineflix.payment` P on CU.customer_id = P.customer_id
join `Cineflix.store` S on CU.store_id = S.store_id
group by 1, 2
order by 1,3 desc; 

32. Determine the number of active and inactive customers per store.

select store_id,
sum(case when active = 1 then 1 else 0 end) as Active_user,
sum(case when active = 0 then 1 else 0 end) as Inactive_user
from `Cineflix.customer`
where store_id is not null
group by 1;

33. List the customers who rented films on their account's creation date.

select distinct concat(CU.first_name,' ',CU.last_name) as Customer_Name
from `Cineflix.customer` CU
join `Cineflix.rental` R on CU.customer_id = R.customer_id
where CU.create_date = R.rental_date 
#Since there is no such data, output is no rows.

34. Calculate the average rental duration for films released in the last twenty five years.

select release_year, avg(rental_duration) as Average_Rental_Duration
from `Cineflix.film`
where release_year >= extract(YEAR FROM date_sub(current_date(), interval 25 year))
group by 1;


35. Retrieve the names of customers who rented films in more than one language.

SELECT DISTINCT concat(CU.first_name,' ', CU.last_name) as Customer_name
FROM `Cineflix.customer` CU
JOIN `Cineflix.rental` R ON CU.customer_id = R.customer_id
JOIN `Cineflix.inventory` I ON R.inventory_id = I.inventory_id
JOIN `Cineflix.film` F ON I.film_id = F.film_id
GROUP BY 1
HAVING COUNT(DISTINCT F.language_id) > 1
ORDER BY 1;
#No Rows as we only have data with 1 language

36. Identify the films with the longest rental durations and their corresponding categories.

          Logic 1: Where we consider that longest rental duration is identified by file table directly.
          select distinct C.name, F.rental_duration
          from `Cineflix.film` F
          join `Cineflix.film_category` FC on F.film_id = FC.film_id
          join `Cineflix.category` C on FC.category_id = C.category_id
          where F.rental_duration = (select max(rental_duration) from `Cineflix.film`)
          order by 1, 2 Desc;


        Logic 2: Where we consider that we need to identify the longest rental duration by multiplying rental_duration & no of times movie has been rented.
        SELECT F.film_id, F.title, F.rental_duration, 
              COUNT(R.rental_id) AS total_rentals,
              F.rental_duration * COUNT(R.rental_id) AS total_rental_duration
        FROM `Cineflix.film` F
        JOIN `Cineflix.inventory` I ON F.film_id = I.film_id
        JOIN `Cineflix.rental` R ON I.inventory_id = R.inventory_id
        GROUP BY F.film_id, F.title, F.rental_duration
        ORDER BY total_rental_duration DESC
        LIMIT 1;
37. Determine the top 5 cities with the highest rental revenue.

select C.city
from `Cineflix.customer` CU 
join `Cineflix.address` AD on CU.address_id = AD.address_id
join `Cineflix.city` C on AD.city_id = C.city_id
join `Cineflix.payment` P on CU.customer_id = P.customer_id
group by 1
order by round(sum(P.amount),2) Desc
limit 5;

select city from (
select C.city, 
dense_rank() over (order by sum(P.amount) desc) as Revenue_Rank,
round(sum(P.amount),2) as Total_Rental 
from `Cineflix.customer` CU 
join `Cineflix.address` AD on CU.address_id = AD.address_id
join `Cineflix.city` C on AD.city_id = C.city_id
join `Cineflix.payment` P on CU.customer_id = P.customer_id
group by 1
#order by 2
) 
tbl1
where tbl1.Revenue_Rank <=5


38. List the customers who rented the most expensive film (highest replacement cost).

select distinct concat(CU.first_name, ' ', CU.last_name) as Customer_Name
from `Cineflix.customer` CU 
join `Cineflix.rental` R on CU.customer_id = R.customer_id
join `Cineflix.inventory` I on R.inventory_id = I.inventory_id
join `Cineflix.film` F on I.film_id = F.film_id
where F.replacement_cost = ( select max(replacement_cost) from `Cineflix.film` ) 


39. Find the stores that rented out all films in their inventory at least once.

SELECT S.store_id
FROM `Cineflix.store` S
JOIN `Cineflix.inventory` I ON S.store_id = I.store_id
LEFT JOIN `Cineflix.rental` R ON I.inventory_id = R.inventory_id
GROUP BY S.store_id
HAVING COUNT(DISTINCT I.film_id) = COUNT(DISTINCT CASE WHEN R.rental_id IS NOT NULL THEN I.film_id END);

40. Retrieve the names of customers who rented films but did not make any payments.

SELECT DISTINCT C.customer_id, CONCAT(C.first_name, ' ', C.last_name) AS Customer_Name
FROM `Cineflix.customer` C
JOIN `Cineflix.rental` R ON C.customer_id = R.customer_id
LEFT JOIN `Cineflix.payment` P ON R.rental_id = P.rental_id
GROUP BY C.customer_id, C.first_name, C.last_name
HAVING COUNT(P.payment_id) = 0;


41. Generate a report of the total number of rentals processed by each staff member in the last year.

select concat(S.first_name,' ',S.last_name) as Staff_Employee,coalesce (count(R.rental_id),0) as Total_Rental
from `Cineflix.staff` S
left join `Cineflix.rental` R on S.staff_id = R.staff_id
where cast(R.rental_date as date) >= date_sub(current_date(), INTERVAL 1 YEAR)
or R.staff_id is null
group by 1
order by 2 desc , 1;
#No rows as wel dont have such data, Use INTERVAL 25 YEAR to see output

42. Identify the customers who rented films in a specific language more than 3 times.

select concat(C.first_name,' ',C.last_name) as Customer_Name , F.language_id, count(R.rental_id) as Rental_Count
#,Count(distinct F.language_id) as Language_Count
from `Cineflix.customer` C
join `Cineflix.rental` R on C.customer_id = R.customer_id
join `Cineflix.inventory` I on R.inventory_id = I.inventory_id
join `Cineflix.film` F on I.film_id = F.film_id
join `Cineflix.language` L on F.language_id = L.language_id
group by 1,2
having count(R.rental_id) > 3;


43. List the names of films that have been rented and returned on the same day.

select distinct F.title
#,R.return_date, R.rental_date
from `Cineflix.film` F
join `Cineflix.inventory` I on F.film_id = I.film_id
join `Cineflix.rental` R on I.inventory_id = R.inventory_id
where R.rental_date = R.return_date;
#We dont have such data

44. Calculate the percentage of active customers who have rented films in the past month.

select concat(round(count(distinct C.customer_id) / (select count(distinct customer_id) from `Cineflix.customer`)*100,1),'%') as Customer_Percentage
from `Cineflix.customer` C
left join `Cineflix.rental` R on C.customer_id = R.customer_id
where C.active = 1
and cast(R.rental_date as date) >= date_sub(cast(current_date() as date), interval 20 year)

45. Find the most popular film in each category and store based on rental count.
46. Determine the number of films rented per staff member in each store.
47. Identify the cities where the average rental duration is below the overall average.


48. Retrieve the names of films rented by customers who have made payments above $100.

select distinct FC.title
from `Cineflix.film_text` FC 
join `Cineflix.inventory` I on FC.film_id = I.film_id
join `Cineflix.rental` R on I.inventory_id = R.inventory_id
join (
select CU.customer_id as Cust_id
from `Cineflix.customer` CU
join `Cineflix.payment` P on CU.customer_id = P.customer_id
group by CU.customer_id
having sum(P.amount) > 100
) as Req_Customer
on R.customer_id = Req_Customer.Cust_id;

#Actually we can remove one unnecessary join from the subquery 

select distinct FC.title
from `Cineflix.film_text` FC 
join `Cineflix.inventory` I on FC.film_id = I.film_id
join `Cineflix.rental` R on I.inventory_id = R.inventory_id
join (
select P.customer_id as Cust_id
from `Cineflix.payment` P 
group by P.customer_id
having sum(P.amount) > 100
) as Req_Customer
on R.customer_id = Req_Customer.Cust_id;

49. Calculate the total revenue generated by each category in the last year.

select distinct C.name, round(sum(P.amount),2) as Rental_Amout
from `Cineflix.category` C
left join `Cineflix.film_category` FC on C.category_id = FC.category_id
left join `Cineflix.inventory` I on FC.film_id = I.film_id
left join `Cineflix.rental` R on I.inventory_id = R.inventory_id
left join `Cineflix.payment` P on cast(R.rental_id as string) = P.rental_id
group by 1
order by 2 desc;


50. Find the rental count of each film and the percentage it contributes to the total rentals.
select FT.title , count(R.rental_id) as Rental_Count, concat(round(100 * sum(P.amount)/(select sum(amount) from `Cineflix.payment`),2),' %') as Percent_Contribution
from `Cineflix.film_text` FT
join `Cineflix.inventory` I on FT.film_id = I.film_id
join `Cineflix.rental` R on I.inventory_id = R.inventory_id
join `Cineflix.payment` P on CAST(R.rental_id as string) = P.rental_id 
group by 1
order by 3 DESC, 2 DESC, 1
